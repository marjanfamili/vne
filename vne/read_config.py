import yaml
import argparse

# Define a function to read the YAML file and store variables
def read_yaml_file(file_path):
    with open(file_path, 'r') as yaml_file:
        data = yaml.safe_load(yaml_file)
    return data

# Create a command line argument parser
parser = argparse.ArgumentParser(description="Read and process a YAML configuration file.")
parser.add_argument("--config_file", required=True, help="Path to the YAML configuration file")

# Parse the command line arguments
args = parser.parse_args()

# Read the YAML file and store the variables
yaml_file_path = args.config_file
config_data = read_yaml_file(yaml_file_path)

# Access and print individual variables
datapath = config_data.get('datapath')
classes = config_data.get('classes')
affinity = config_data.get('affinity')
shift_min = config_data.get('shift_min')
tensorboard = config_data.get('tensorboard')
limit = config_data.get('limit')
datatype = config_data.get('datatype')
split = config_data.get('split')
model = config_data.get('model')
depth = config_data.get('depth')
channels = config_data.get('channels')
latent_dims = config_data.get('latent_dims')
pose_dims = config_data.get('pose_dims')
no_val_drop = config_data.get('no_val_drop')
epochs = config_data.get('epochs')
batch = config_data.get('batch')
learning = config_data.get('learning')
gpu = config_data.get('gpu')
beta_min = config_data.get('beta_min')
beta = config_data.get('beta')
beta_cycle = config_data.get('beta_cycle')
beta_ratio = config_data.get('beta_ratio')
cyc_method_beta = config_data.get('cyc_method_beta')
gamma_min = config_data.get('gamma_min')
gamma = config_data.get('gamma')
gamma_cycle = config_data.get('gamma_cycle')
gamma_ratio = config_data.get('gamma_ratio')
cyc_method_gamma = config_data.get('cyc_method_gamma')
loss_fn = config_data.get('loss_fn')
freq_eval = config_data.get('freq_eval')
freq_sta = config_data.get('freq_sta')
freq_emb = config_data.get('freq_emb')
freq_rec = config_data.get('freq_rec')
freq_int = config_data.get('freq_int')
freq_dis = config_data.get('freq_dis')
freq_pos = config_data.get('freq_pos')
freq_acc = config_data.get('freq_acc')
freq_sim = config_data.get('freq_sim')
freq_all = config_data.get('freq_all')
eval = config_data.get('eval')
dynamic = config_data.get('dynamic')
vis_all = config_data.get('vis_all')
vis_emb = config_data.get('vis_emb')
vis_cyc = config_data.get('vis_cyc')
vis_rec = config_data.get('vis_rec')
vis_los = config_data.get('vis_los')
vis_int = config_data.get('vis_int')
vis_dis = config_data.get('vis_dis')
vis_pos = config_data.get('vis_pos')
vis_acc = config_data.get('vis_acc')

# Print the variables
print(f"datapath: {datapath}")
print(f"classes: {classes}")
print(f"affinity: {affinity}")
print(f"shift_min: {shift_min}")
print(f"tensorboard: {tensorboard}")
print(f"limit: {limit}")
print(f"datatype: {datatype}")
print(f"split: {split}")
print(f"model: {model}")
print(f"depth: {depth}")
print(f"channels: {channels}")
print(f"latent_dims: {latent_dims}")
print(f"pose_dims: {pose_dims}")
print(f"no_val_drop: {no_val_drop}")
print(f"epochs: {epochs}")
print(f"batch: {batch}")
print(f"learning: {learning}")
print(f"gpu: {gpu}")
print(f"beta_min: {beta_min}")
print(f"beta: {beta}")
print(f"beta_cycle: {beta_cycle}")
print(f"beta_ratio: {beta_ratio}")
print(f"cyc_method_beta: {cyc_method_beta}")
print(f"gamma_min: {gamma_min}")
print(f"gamma: {gamma}")
print(f"gamma_cycle: {gamma_cycle}")
print(f"gamma_ratio: {gamma_ratio}")
print(f"cyc_method_gamma: {cyc_method_gamma}")
print(f"loss_fn: {loss_fn}")
print(f"freq_eval: {freq_eval}")
print(f"freq_sta: {freq_sta}")
print(f"freq_emb: {freq_emb}")
print(f"freq_rec: {freq_rec}")
print(f"freq_int: {freq_int}")
print(f"freq_dis: {freq_dis}")
print(f"freq_pos: {freq_pos}")
print(f"freq_acc: {freq_acc}")
print(f"freq_sim: {freq_sim}")
print(f"freq_all: {freq_all}")
print(f"eval: {eval}")
print(f"dynamic: {dynamic}")
print(f"vis_all: {vis_all}")
print(f"vis_emb: {vis_emb}")
print(f"vis_cyc: {vis_cyc}")
print(f"vis_rec: {vis_rec}")
print(f"vis_los: {vis_los}")
print(f"vis_int: {vis_int}")
print(f"vis_dis: {vis_dis}")
print(f"vis_pos: {vis_pos}")
print(f"vis_acc: {vis_acc}")
